I". <p>The Web is a constantly evolving field. Continuous learning is critical to staying relevant. I’ve been building the Web for two years now. I’ve tried two approaches to acquiring web development knowledge and skills. Whilst these approaches are similar, the outcomes are different.</p>

<p><img src="https://cdn.pixabay.com/photo/2021/08/04/13/06/software-developer-6521720_1280.jpg" style="max-width: 100%;" /></p>

<h2>Old Approach</h2>

<p>My passion for the Web primarily stemmed from its visual design. Before attending university to study finance and information systems, I considered becoming an artist – I wanted to be an animator, an art director but not a banker or technologist. The Web brought me back to the path towards art and design. I spent a fair amount of time designing web pages with HTML and CSS. This impulsive pursuit of aestheticism led me to create lots of websites. My learning model was basically producing as many websites as I could.</p>

<p>Web development; however, is much more than visual design. Typical web apps have a front and a back end. They run on database systems to collect user inputs and capture the data needed for business analysts to retrieve insights and improve products and services. Dynamic web applications will continue to dominate the Web market yet virtually all the websites that I’ve built so far are static – they don’t have many practical features. They don’t have server-side programs for collecting and processing data. They’re simply web-based slide decks presenting static information. This is not enough to make me an adequate web developer.</p>

<h2>New Approach</h2>

<p>After graduation, I joined a multinational organisation working as a business analyst. This full-time job is a challenge. I need to spend days and nights analysing large data sets to retrieve actionable business insights; therefore, spending hours crafting designs is no longer viable. Thus, I moved away from the original learning model to stick around with one of the websites that I built in school and focus on improving that single website.</p>

<h2>Problems with the Old Approach</h2>

<p>The old approach was mainly driven by my impulse to create new designs. This learning model enabled me to think creatively, but it has several problems.</p>

<h3>NO1. Lack of practice</h3>

<p>Moving from design to design did not give me enough opportunities to practise coding. When I move from one design to another, a large chunk of code is directly borrowed from the old website. I was able to create new ones with the same set of code and a little modification. Most of the time; therefore, was spent on moving files rather than doing research on new features. Whilst the websites are visually different, they’re identical technologically.</p>

<p>My obsessive focus on design is just one of the reasons behind my constant switch between projects. Another reason is that I tend to take the path of least resistance – I’d stick with what I’m familiar with rather than trying new stuff. When the design is complete, it’s time to improve the website to add more features. This requires more logical thinking and less aesthetic consideration , which isn’t something that I’m good at.</p>

<p>When the maths outweighs design, I become less confident in my skills and start to persuade myself to move on to the next project. Even visual design requires some logic – HTML and CSS are just markup languages. JavaScript is also used in building front-end designs, yet I’ve rarely used it because writing HTML and CSS is a lot easier than writing JavaScript programs.</p>

<h3>NO2. Lack of challenge</h3>

<p>The lack of practice leads to an even more significant problem – the absence of challenges. When we encounter challenges, we will push ourselves to find solutions, think out of the box, and attempt new approaches that we have not tried before. This is how we learn and grow. And, when there’s no challenge, we’re simply replicating what we are already familiar with. This won’t help us grow because we’re staying inside our comfort zone. We will never get to explore new opportunities and challenge ourselves to do more and better.</p>

<p>If I never dive deeper, I can only do such much on the Web. I will never know how to write JavaScript to improve the design, use PHP programs to collect and process data and use SQL to administer relational databases. I’m missing many opportunities to grow by repeating what I’ve been doing with HTML and CSS.</p>

<h3>NO3. Time consuming</h3>

<p>The most serious flaw in this strategy, however, is the loss of valuable time. I prepared for my first commercial project over the course of three months of research and practice. As a full-time employee, I now only have a few evenings and weekends to explore the Web. This strategy is becoming increasingly unviable. I no longer have enough time to do things like move files around — things that don’t help me grow and achieve more. Learning new things and putting in additional practice time is a much better use of time.</p>

<h2>Advantages of the New Approach</h2>

<p>Let’s get into why I switched to a new learning approach. I had no choice but to shift away from the old approach because of its three flaws. The benefits of the new technique make it a good choice for this move.</p>

<h3>NO1. More challenges (aka growth)</h3>

<p>One of the problems of the old strategy was the lack of challenge, but it is an advantage of the new approach. Rather of switching between websites, sticking to one allows me to think more imaginatively about what I might do better given certain limits. Without the option of starting over, I must examine viability as well as what I may improve upon without significantly altering what I’ve built. This method pushes me to step outside of my comfort zone and attempt new things.
If there’s nothing further I can do using HTML and CSS, I’ll have to resort to JavaScript and other Web-critical technologies for which I lack the necessary understanding and competence. Using this method, I’ve challenged myself to better deal with browser compatibility by researching layout ideas, used Jekyll to generate static HTML pages from markdown files – something I never thought was feasible, and even built in a static search engine using Lunr.Js and JSON!</p>

<h3>NO2. More thoughtful</h3>

<p>Sticking with one website has also made me a thoughtful individual. It forces me to reflect critically on the product and look for ways to improve it. I can take my skills to the next level by continuously improving my work only if I can see what I’ve not done good enough.</p>

<p>Web development isn’t just writing code. 10,000 lines of code without much thinking won’t be as rewarding as one line of thoughtful code. There’re many developers who are fluent in Web technologies, but not many of them are thoughtful – they view themselves as coders rather than owners. I found this new approach to have shaped me into a product manager who’s capable of coding rather than just another developer who knows only how to code a website.</p>

<h3>NO3. More efficient</h3>

<p>Better yet, this new approach is significantly more efficient than the old approach because I don’t need to spend time moving files. Every line of code I write challenges me to attempt new things. This helps me improve my skills. Spending the same amount of time, I can learn a lot more by adopting the new approach than using the old approach.</p>

<p>I’ve made the previous versions of this website accessible to the public at <a href="/archives/">archives</a>. You can see the evoluation of this website. By comparing the latest version of this website, aka the current website, with the older versions, you can see the progress I’ve made.</p>

<p>Knowing that the new approach is more efficient, I will continue to focus on improving the current website. You will see more improvements made to the current website in the coming weeks. By sticking with one design, I can focus my resources on navigating untouched waters and push me out of my comfort zone to challenge the status quo and make better web-based experiences.</p>

:ET